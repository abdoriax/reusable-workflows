name: Build Docker, Update Manifests for Argo CD on Tag

on:
  workflow_call:
    inputs:
      triggering_ref:
        description: 'The git ref name (e.g., v1.0.0, v1.0.0-alpha, or a simulated tag for testing) that is initiating the process. Used for tag parsing and Docker metadata.'
        required: true
        type: string
      source_checkout_ref:
        description: 'The git ref (branch, tag, or SHA) to checkout for building the application. Defaults to the value of triggering_ref if not specified.'
        required: false
        type: string
    outputs:
      image_tag:
        description: 'The Docker image tag that was built (e.g., v1.0.0).'
        value: ${{ jobs.build_and_push_docker_image.outputs.image_tag }}
      image_name:
        description: 'The full Docker image name that was built (e.g., ghcr.io/owner/repo).'
        value: ${{ jobs.build_and_push_docker_image.outputs.image_name }}

permissions:
  contents: write
  packages: write

jobs:
  build_and_push_docker_image:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    outputs:
      image_tag: ${{ steps.image_meta_output.outputs.version }}
      image_name: ghcr.io/${{ github.repository_owner }}/${{ env.REPO_NAME }}
    env:
      REPO_NAME: ${{ github.event.repository.name }}
    steps:
      - name: Checkout Repository for Build
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.source_checkout_ref || inputs.triggering_ref }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository_owner }}/${{ env.REPO_NAME }}
          tags: |
            type=ref,event=tag

      - name: Build and Push Docker Image
        uses: docker/build-push-action@v5
        with:
          context: ./app
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Set image tag output
        id: image_meta_output
        run: echo "version=${{ steps.meta.outputs.version }}" >> $GITHUB_OUTPUT

  update_manifest_dev:
    name: Update Development Manifest
    needs: build_and_push_docker_image
    if: contains(inputs.triggering_ref, 'alpha')
    runs-on: ubuntu-latest
    environment:
      name: development
    env:
      MANIFEST_FILE: "./k8s/overlays/development/deployment.yaml"
      GIT_COMMIT_MESSAGE: "Update dev deployment image to ${{ needs.build_and_push_docker_image.outputs.image_tag }}"
    steps:
      - name: Checkout Repository (main branch for manifest update)
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          ref: main

      - name: Install yq
        run: |
            sudo wget https://github.com/mikefarah/yq/releases/download/v4.44.3/yq_linux_amd64 -O /usr/bin/yq
            sudo chmod +x /usr/bin/yq
            yq --version

      - name: Update Kubernetes Manifest
        env:
          NEW_IMAGE_WITH_TAG: "${{ needs.build_and_push_docker_image.outputs.image_name }}:${{ needs.build_and_push_docker_image.outputs.image_tag }}"
        run: |
          echo "Triggering ref for this run: ${{ inputs.triggering_ref }}"
          echo "Updating $MANIFEST_FILE with image: $NEW_IMAGE_WITH_TAG"
          if [ ! -f "$MANIFEST_FILE" ]; then
            echo "Error: $MANIFEST_FILE not found"
            exit 1
          fi
          if ! yq e '.spec.template.spec.containers[0]' "$MANIFEST_FILE" > /dev/null; then
            echo "Error: No container found at .spec.template.spec.containers[0] in $MANIFEST_FILE"
            exit 1
          fi
          yq e '.spec.template.spec.containers[0].image = strenv(NEW_IMAGE_WITH_TAG)' -i "$MANIFEST_FILE"
          echo "Manifest content after update:"
          cat "$MANIFEST_FILE"

      - name: Commit and Push Manifest Changes
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
          git add "$MANIFEST_FILE"
          if git diff --staged --quiet; then
            echo "No changes to commit to $MANIFEST_FILE."
          else
            git commit -m "${{ env.GIT_COMMIT_MESSAGE }}"
            git push origin main
            echo "Pushed manifest changes for development to main branch."
          fi

  update_manifest_staging:
    name: Update Staging Manifest
    needs: build_and_push_docker_image
    if: contains(inputs.triggering_ref, 'beta')
    runs-on: ubuntu-latest
    environment:
      name: staging
    env:
      MANIFEST_FILE: "./k8s/overlays/staging/deployment.yaml"
      GIT_COMMIT_MESSAGE: "Update staging deployment image to ${{ needs.build_and_push_docker_image.outputs.image_tag }}"
    steps:
      - name: Checkout Repository (main branch for manifest update)
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          ref: main

      - name: Install yq
        run: |
            sudo wget https://github.com/mikefarah/yq/releases/download/v4.44.3/yq_linux_amd64 -O /usr/bin/yq
            sudo chmod +x /usr/bin/yq
            yq --version

      - name: Update Kubernetes Manifest
        env:
          NEW_IMAGE_WITH_TAG: "${{ needs.build_and_push_docker_image.outputs.image_name }}:${{ needs.build_and_push_docker_image.outputs.image_tag }}"
        run: |
          echo "Triggering ref for this run: ${{ inputs.triggering_ref }}"
          echo "Updating $MANIFEST_FILE with image: $NEW_IMAGE_WITH_TAG"
          if [ ! -f "$MANIFEST_FILE" ]; then
            echo "Error: $MANIFEST_FILE not found"
            exit 1
          fi
          if ! yq e '.spec.template.spec.containers[0]' "$MANIFEST_FILE" > /dev/null; then
            echo "Error: No container found at .spec.template.spec.containers[0] in $MANIFEST_FILE"
            exit 1
          fi
          yq e '.spec.template.spec.containers[0].image = strenv(NEW_IMAGE_WITH_TAG)' -i "$MANIFEST_FILE"
          echo "Manifest content after update:"
          cat "$MANIFEST_FILE"

      - name: Commit and Push Manifest Changes
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
          git add "$MANIFEST_FILE"
          if git diff --staged --quiet; then
            echo "No changes to commit to $MANIFEST_FILE."
          else
            git commit -m "${{ env.GIT_COMMIT_MESSAGE }}"
            git push origin main
            echo "Pushed manifest changes for staging to main branch."
          fi

  update_manifest_production:
    name: Update Production Manifest
    needs: build_and_push_docker_image
    if: "!contains(inputs.triggering_ref, 'alpha') && !contains(inputs.triggering_ref, 'beta')"
    runs-on: ubuntu-latest
    environment:
      name: production
    env:
      MANIFEST_FILE: "./k8s/overlays/production/deployment.yaml"
      GIT_COMMIT_MESSAGE: "Update production deployment image to ${{ needs.build_and_push_docker_image.outputs.image_tag }}"
    steps:
      - name: Checkout Repository (main branch for manifest update)
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          ref: main

      - name: Install yq
        run: |
            sudo wget https://github.com/mikefarah/yq/releases/download/v4.44.3/yq_linux_amd64 -O /usr/bin/yq
            sudo chmod +x /usr/bin/yq
            yq --version

      - name: Update Kubernetes Manifest
        env:
          NEW_IMAGE_WITH_TAG: "${{ needs.build_and_push_docker_image.outputs.image_name }}:${{ needs.build_and_push_docker_image.outputs.image_tag }}"
        run: |
          echo "Triggering ref for this run: ${{ inputs.triggering_ref }}"
          echo "Updating $MANIFEST_FILE with image: $NEW_IMAGE_WITH_TAG"
          if [ ! -f "$MANIFEST_FILE" ]; then
            echo "Error: $MANIFEST_FILE not found"
            exit 1
          fi
          if ! yq e '.spec.template.spec.containers[0]' "$MANIFEST_FILE" > /dev/null; then
            echo "Error: No container found at .spec.template.spec.containers[0] in $MANIFEST_FILE"
            exit 1
          fi
          yq e '.spec.template.spec.containers[0].image = strenv(NEW_IMAGE_WITH_TAG)' -i "$MANIFEST_FILE"
          echo "Manifest content after update:"
          cat "$MANIFEST_FILE"

      - name: Commit and Push Manifest Changes
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
          git add "$MANIFEST_FILE"
          if git diff --staged --quiet; then
            echo "No changes to commit to $MANIFEST_FILE."
          else
            git commit -m "${{ env.GIT_COMMIT_MESSAGE }}"
            git push origin main
            echo "Pushed manifest changes for production to main branch."
          fi
